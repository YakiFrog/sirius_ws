amcl:
  ros__parameters:
    use_sim_time: False

    # ロボットの動作モデルのパラメータ
    alpha1: 0.2 # ロールのノイズの標準偏差
    alpha2: 0.2 # ピッチのノイズの標準偏差
    alpha3: 0.2 # ヨーのノイズの標準偏差
    alpha4: 0.2 # 進行方向のノイズの標準偏差
    alpha5: 0.2 # 進行方向のノイズの標準偏差
    base_frame_id: "base_footprint"
    global_frame_id: "map"

    # ビームスキップのパラメータ
    beam_skip_distance: 0.5 # ビームスキップの距離[m]
    beam_skip_error_threshold: 0.9 # ビームスキップのエラー閾値
    beam_skip_threshold: 0.3 # ビームスキップの閾値
    do_beamskip: False # ビームスキップを行うかどうか default: False

    lambda_short: 0.1
    laser_likelihood_max_dist: 100.0 # レーザの尤度の最大距離[m] default: 2.0
    laser_max_range: 100.0
    laser_min_range: -1.0
    laser_model_type: "likelihood_field"

    # パーティクルフィルタのパラメータ
    max_beams: 60 # ビームの数 default: 60
    max_particles: 2000 # パーティクルの数 default: 2000
    min_particles: 400 # パーティクルの最小数 default: 500 -> 400

    odom_frame_id: "odom"
    pf_err: 0.05
    pf_z: 0.99
    recovery_alpha_fast: 0.1 # リカバリのα値 0.4 -> 0.2 0.4がでかすぎた
    recovery_alpha_slow: 0.1 # リカバリのα値 いれるなら，0.1以上じゃないと動かない
    resample_interval: 1 # リサンプリングの間隔 default: 1
    robot_model_type: "nav2_amcl::DifferentialMotionModel"
    save_pose_rate: 0.5
    sigma_hit: 0.2
    tf_broadcast: True
    transform_tolerance: 1.0 # 1.0
    update_min_a: 0.05 # パーティクルフィルタの更新の閾値 default: 0.2
    update_min_d: 0.10 # パーティクルフィルタの更新の閾値 default: 0.25
    z_hit: 0.5
    z_max: 0.05
    z_rand: 0.5
    z_short: 0.05
    scan_topic: scan # スキャンデータのトピック名

bt_navigator:
  ros__parameters:
    use_sim_time: False
    global_frame: map
    robot_base_frame: base_footprint # default: base_link
    odom_topic: /odom
    bt_loop_duration: 10
    default_server_timeout: 20
    # wait_for_service_timeout: 1000
    # 'default_nav_through_poses_bt_xml' and 'default_nav_to_pose_bt_xml' are use defaults:
    # nav2_bt_navigator/navigate_to_pose_w_replanning_and_recovery.xml
    # nav2_bt_navigator/navigate_through_poses_w_replanning_and_recovery.xml
    # They can be set here or via a RewrittenYaml remap from a parent launch file to Nav2.
    plugin_lib_names:
      - nav2_compute_path_to_pose_action_bt_node
      - nav2_compute_path_through_poses_action_bt_node
      - nav2_smooth_path_action_bt_node
      - nav2_follow_path_action_bt_node
      - nav2_spin_action_bt_node
      - nav2_wait_action_bt_node
      - nav2_assisted_teleop_action_bt_node
      - nav2_back_up_action_bt_node
      - nav2_drive_on_heading_bt_node
      - nav2_clear_costmap_service_bt_node
      - nav2_is_stuck_condition_bt_node
      - nav2_goal_reached_condition_bt_node
      - nav2_goal_updated_condition_bt_node
      - nav2_globally_updated_goal_condition_bt_node
      - nav2_is_path_valid_condition_bt_node
      - nav2_initial_pose_received_condition_bt_node
      - nav2_reinitialize_global_localization_service_bt_node
      - nav2_rate_controller_bt_node
      - nav2_distance_controller_bt_node
      - nav2_speed_controller_bt_node
      - nav2_truncate_path_action_bt_node
      - nav2_truncate_path_local_action_bt_node
      - nav2_goal_updater_node_bt_node
      - nav2_recovery_node_bt_node
      - nav2_pipeline_sequence_bt_node
      - nav2_round_robin_node_bt_node
      - nav2_transform_available_condition_bt_node
      - nav2_time_expired_condition_bt_node
      - nav2_path_expiring_timer_condition
      - nav2_distance_traveled_condition_bt_node
      - nav2_single_trigger_bt_node
      - nav2_goal_updated_controller_bt_node
      - nav2_is_battery_low_condition_bt_node
      - nav2_navigate_through_poses_action_bt_node
      - nav2_navigate_to_pose_action_bt_node
      - nav2_remove_passed_goals_action_bt_node
      - nav2_planner_selector_bt_node
      - nav2_controller_selector_bt_node
      - nav2_goal_checker_selector_bt_node
      - nav2_controller_cancel_bt_node
      - nav2_path_longer_on_approach_bt_node
      - nav2_wait_cancel_bt_node
      - nav2_spin_cancel_bt_node
      - nav2_back_up_cancel_bt_node
      - nav2_assisted_teleop_cancel_bt_node
      - nav2_drive_on_heading_cancel_bt_node
      - nav2_is_battery_charging_condition_bt_node

bt_navigator_navigate_through_poses_rclcpp_node:
  ros__parameters:
    use_sim_time: False

bt_navigator_navigate_to_pose_rclcpp_node:
  ros__parameters:
    use_sim_time: False

# controller_server:
#   ros__parameters:
#     use_sim_time: False
#     controller_frequency: 30.0
#     FollowPath:
#       plugin: "nav2_mppi_controller::MPPIController"
#       time_steps: 60
#       model_dt: 0.050 # default: 0.05
#       batch_size: 500
#       vx_std: 0.15 # default: 0.2 -> 0.1
#       vy_std: 0.15
#       wz_std: 0.1 # default: 0.4 -> 0.1
#       vx_max: 0.40 # default: 0.50 -> 0.40
#       vx_min: 0.0 # default: -0.35 -> -0.40
#       vy_max: 0.40
#       wz_max: 0.20 # default: 1.9 -> 0.4
#       ax_max: 0.30 # default: 3.0 -> 0.50
#       ax_min: -0.30 # default: -3.0 -> -0.50
#       ay_max: 0.30
#       az_max: 1.00 # default: 3.5 -> 0.35
#       iteration_count: 1
#       prune_distance: 1.0
#       transform_tolerance: 5.0 # default: 0.1 -> 0.2
#       temperature: 0.3
#       gamma: 0.015
#       motion_model: "DiffDrive"
#       visualize: False # default: False -> trueにするとパフォーマンスが落ちる
#       reset_period: 1.0 # (only in Humble)
#       regenerate_noises: False
#       TrajectoryVisualizer:
#         trajectory_step: 5
#         time_step: 3
#       AckermannConstraints:
#         min_turning_r: 0.0
#       critics: ["ConstraintCritic", "CostCritic", "GoalCritic", "GoalAngleCritic", "PathAlignCritic", "PathFollowCritic", "PathAngleCritic", "PreferForwardCritic"]
#       ConstraintCritic:
#         enabled: True
#         cost_power: 1
#         cost_weight: 4.0
#       GoalCritic:
#         enabled: True
#         cost_power: 1
#         cost_weight: 5.0
#         threshold_to_consider: 1.4
#       GoalAngleCritic:
#         enabled: True
#         cost_power: 1
#         cost_weight: 3.0
#         threshold_to_consider: 0.5
#       PreferForwardCritic:
#         enabled: True
#         cost_power: 1
#         cost_weight: 5.0
#         threshold_to_consider: 0.5
#       # ObstaclesCritic:
#       #   enabled: True
#       #   cost_power: 1
#       #   repulsion_weight: 1.5
#       #   critical_weight: 20.0
#       #   consider_footprint: False
#       #   collision_cost: 10000.0
#       #   collision_margin_distance: 0.1
#       #   near_goal_distance: 0.5
#       #   inflation_radius: 0.55 # (only in Humble)
#       #   cost_scaling_factor: 10.0 # (only in Humble)
#       CostCritic:
#         enabled: True
#         cost_power: 1
#         cost_weight: 3.81
#         critical_cost: 300.0
#         consider_footprint: True
#         collision_cost: 1000000.0
#         near_goal_distance: 1.0
#         trajectory_point_step: 2
#       PathAlignCritic:
#         enabled: True
#         cost_power: 1
#         cost_weight: 14.0
#         max_path_occupancy_ratio: 0.05
#         trajectory_point_step: 4
#         threshold_to_consider: 0.5
#         offset_from_furthest: 20
#         use_path_orientations: False
#       PathFollowCritic:
#         enabled: True
#         cost_power: 1
#         cost_weight: 5.0
#         offset_from_furthest: 5
#         threshold_to_consider: 1.4
#       PathAngleCritic:
#         enabled: True
#         cost_power: 1
#         cost_weight: 2.0
#         offset_from_furthest: 4
#         threshold_to_consider: 0.5
#         max_angle_to_furthest: 1.0
#         mode: 0
#       # VelocityDeadbandCritic:
#       #   enabled: True
#       #   cost_power: 1
#       #   cost_weight: 35.0
#       #   deadband_velocities: [0.05, 0.05, 0.05]
#       # TwirlingCritic:
#       #   enabled: True
#       #   twirling_cost_power: 1
#       #   twirling_cost_weight: 10.0

controller_server:
  ros__parameters:
    use_sim_time: False
    controller_frequency: 30.0
    min_x_velocity_threshold: 0.05
    min_y_velocity_threshold: 0.0
    min_theta_velocity_threshold: 0.001
    failure_tolerance: 0.3
    progress_checker_plugin: "progress_checker"
    goal_checker_plugins: ["general_goal_checker"] # "precise_goal_checker"
    controller_plugins: ["FollowPath"]

    # Progress checker parameters
    progress_checker:
      plugin: "nav2_controller::SimpleProgressChecker"
      required_movement_radius: 0.5
      movement_time_allowance: 10.0

    general_goal_checker:
      stateful: True
      plugin: "nav2_controller::SimpleGoalChecker"
      xy_goal_tolerance: 0.5 # 0.25
      yaw_goal_tolerance: 0.5 # 0.25
    # DWB parameters
    FollowPath:
      plugin: "dwb_core::DWBLocalPlanner"
      debug_trajectory_details: True

      min_vel_x: 0.10
      min_vel_y: 0.0
      max_vel_x: 0.40
      max_vel_y: 0.0
      max_vel_theta: 1.50 # でかくないと
      min_speed_xy: 0.0
      max_speed_xy: 0.1
      min_speed_theta: 0.1
      # Add high threshold velocity for turtlebot 3 issue.
      # https://github.com/ROBOTIS-GIT/turtlebot3_simulations/issues/75
      acc_lim_x: 0.60
      acc_lim_y: 0.0
      acc_lim_theta: 2.00
      decel_lim_x: -0.60
      decel_lim_y: 0.0
      decel_lim_theta: -2.00

      vx_samples: 10 # default: 20
      vy_samples: 5
      vtheta_samples: 15 # default: 20
      sim_time: 2.0 # default: 1.7

      linear_granularity: 0.05
      angular_granularity: 0.025
      transform_tolerance: 5.0
      xy_goal_tolerance: 0.5 # 0.25
      trans_stopped_velocity: 0.25
      short_circuit_trajectory_evaluation: True
      stateful: True
      critics:
        [
          "RotateToGoal",
          "Oscillation",
          "BaseObstacle",
          "GoalAlign",
          "PathAlign",
          "PathDist",
          "GoalDist",
        ]
      BaseObstacle.scale: 0.50 # 0.02
      PathAlign.scale: 32.0
      PathAlign.forward_point_distance: 0.1
      GoalAlign.scale: 24.0
      GoalAlign.forward_point_distance: 0.1
      PathDist.scale: 32.0
      GoalDist.scale: 24.0
      RotateToGoal.scale: 32.0
      RotateToGoal.slowing_factor: 5.0
      RotateToGoal.lookahead_time: -1.0

local_costmap:
  local_costmap:
    ros__parameters:
      update_frequency: 10.0 # コストマップの更新周期[Hz] default: 5.0
      publish_frequency: 10.0 # default: 5.0
      global_frame: odom
      robot_base_frame: base_footprint
      use_sim_time: False
      rolling_window: True # ロボットが動くたびにコストマップを更新するかどうか
      width: 3 # ローカルコストマップのサイズ[m]
      height: 3 # ローカルコストマップのサイズ[m]
      resolution: 0.05
      footprint: "[ [0.50, 0.30], [0.50, -0.30], [-0.70, -0.30], [-0.70, 0.30] ]" # ロボットの形状
      plugins: ["static_layer", "stvl_layer", "inflation_layer", "obstacle_layer"]
      stvl_layer:
        plugin: "spatio_temporal_voxel_layer/SpatioTemporalVoxelLayer" # 時空間ボクセルレイヤープラグイン
        enabled: true # レイヤーを有効化
        voxel_decay: 1.0 # ボクセル減衰時間（秒）- 線形なら秒単位、指数関数なら e^n
        decay_model: 0 # 減衰モデル（0=線形、1=指数関数、-1=永続的）
        voxel_size: 0.10 # ボクセルサイズ（メートル）
        track_unknown_space: true # 未知の領域を追跡するかどうか（デフォルトは既知）
        mark_threshold: 0 # 障害物としてマークするボクセル高さの閾値
        update_footprint_enabled: true # ロボットの足跡を更新するかどうか
        combination_method: 1 # レイヤー結合方法（1=最大値、0=上書き）
        origin_z: 0.0 # Z原点（メートル）
        publish_voxel_map: true # ボクセルマップを公開するかどうか（デフォルトはオフ）
        transform_tolerance: 5.0 # 変換許容時間（秒）
        mapping_mode: false # マッピングモード（デフォルトはオフ、ナビゲーション以外の用途でマップを保存）
        map_save_duration: 60.0 # マップの自動保存間隔（秒）、デフォルトは60秒
        observation_sources: rgbd1_mark rgbd1_clear # 観測ソース
        rgbd1_mark:
          data_type: PointCloud2 # データ型
          topic: /velodyne_points # 点群トピック
          marking: true # 障害物をマークするかどうか
          clearing: false # 障害物をクリアするかどうか
          obstacle_range: 4.0 # 障害物検知範囲（メートル）
          min_obstacle_height: 0.3 # 最小障害物高さ（メートル）、デフォルトは0
          max_obstacle_height: 2.0 # 最大障害物高さ（メートル）、デフォルトは3
          expected_update_rate: 0.0 # 期待更新レート、この速度で更新されない場合はバッファから削除
          observation_persistence: 0.0 # 観測持続時間、値が0の場合は最新の測定値のみ使用
          inf_is_valid: false # 無限値が有効かどうか（レーザースキャン用）
          filter: "voxel" # フィルタータイプ（"voxel"、"passthrough"、またはフィルタなし）
          clear_after_reading: true # 読み取り後にバッファをクリアするかどうか
        rgbd1_clear:
          enabled: true # 有効化（サービスコールで切り替え可能）
          data_type: PointCloud2 # データ型
          topic: /velodyne_points # 点群トピック
          marking: false # 障害物をマークしない
          clearing: true # 障害物をクリアする
          max_z: 8.0 # 最大Z値（メートル）、デフォルトは0
          min_z: 1.0 # 最小Z値（メートル）、デフォルトは10
          vertical_fov_angle: 0.523 # 垂直視野角（ラジアン）、デフォルトは0.7
          vertical_fov_padding: 0.05 # 3DライダーのパディングF（メートル）
          horizontal_fov_angle: 6.29 # 水平視野角（ラジアン）、VLP16などは360度（約6.29ラジアン）
          decay_acceleration: 5.0 # 減衰加速度（1/s^2）、デフォルトは0
          model_type: 1 # フラスタムのモデルタイプ（0=深度カメラ、1=VLP16などの3Dライダー）
      obstacle_layer:
        plugin: "nav2_costmap_2d::ObstacleLayer"
        enabled: True
        observation_sources: scan
        scan:
          topic: /hokuyo_scan
          max_obstacle_height: 3.0
          clearing: True
          marking: True
          data_type: "LaserScan"
          raytrace_max_range: 5.0
          raytrace_min_range: 0.0
          obstacle_max_range: 5.0
          obstacle_min_range: 0.0
      inflation_layer:
        plugin: "nav2_costmap_2d::InflationLayer"
        cost_scaling_factor: 100.0
        inflation_radius: 0.30 # default: 0.55
      static_layer:
        plugin: "nav2_costmap_2d::StaticLayer"
        map_subscribe_transient_local: True
      always_send_full_costmap: True

global_costmap:
  global_costmap:
    ros__parameters:
      update_frequency: 5.0
      publish_frequency: 5.0
      global_frame: map
      robot_base_frame: base_footprint # default: base_link
      use_sim_time: False
      resolution: 0.05
      track_unknown_space: True
      robot_radius: 0.80
      plugins: ["static_layer", "inflation_layer", "obstacle_layer"]
      obstacle_layer:
        plugin: "nav2_costmap_2d::ObstacleLayer"
        enabled: True
        observation_sources: scan
        scan:
          topic: /scan
          max_obstacle_height: 3.0
          clearing: True
          marking: True
          data_type: "LaserScan"
          raytrace_max_range: 5.0
          raytrace_min_range: 0.0
          obstacle_max_range: 5.0
          obstacle_min_range: 0.0
      inflation_layer:
        plugin: "nav2_costmap_2d::InflationLayer"
        cost_scaling_factor: 100.0
        inflation_radius: 0.30 # default: 0.55
      static_layer:
        plugin: "nav2_costmap_2d::StaticLayer"
        map_subscribe_transient_local: True
      always_send_full_costmap: True

map_server:
  ros__parameters:
    use_sim_time: False
    # Overridden in launch by the "map" launch configuration or provided default value.
    # To use in yaml, remove the default "map" value in the tb3_simulation_launch.py file & provide full path to map below.
    yaml_filename: ""

map_saver:
  ros__parameters:
    use_sim_time: False
    save_map_timeout: 10000 # タイムアウト時間[s] default: 5.0 (5 -> 10000)
    free_thresh_default: 0.25
    occupied_thresh_default: 0.65
    map_subscribe_transient_local: True

# これ重い
# planner_server:
#   ros__parameters:
#     expected_planner_frequency: 20.0  # 期待されるプランナの周波数
#     use_sim_time: False  # シミュレーション時間を使用するかどうか
#     planner_plugins: ["GridBased"]  # 使用するプランナプラグイン
#     GridBased:
#       plugin: "nav2_smac_planner/SmacPlannerLattice"  # 使用するプランナの種類
#       tolerance: 0.5  # 許容誤差（メートル単位）
#       downsample_costmap: False  # コストマップをダウンサンプリングするかどうか(default: False)
#       downsampling_factor: 1  # コストマップレイヤーの解像度の倍率
#       allow_unknown: True  # 未知の領域を通過することを許可するかどうか
#       max_iterations: 1000000  # 最大反復回数（到達不可能な場合）
#       max_on_approach_iterations: 1000  # 許容誤差内でゴールに到達するための最大反復回数
#       terminal_checking_interval: 5000  # ゴールがキャンセルされたかプランナがタイムアウトしたかをチェックする間隔（反復回数）
#       max_planning_time: 3.5  # プランニング、スムージング、アップサンプリングの最大時間（秒単位）
#       motion_model_for_search: "DUBIN"  # 使用するモーションモデル（Hybrid Dubin, Reeds-Shepp）
#       cost_travel_multiplier: 2.0  # 高コスト領域を避けるためのコスト乗数
#       angle_quantization_bins: 64  # 角度の量子化ビンの数（2Dノードの場合は1）
#       analytic_expansion_ratio: 3.5  # アナリティック展開の比率
#       analytic_expansion_max_length: 3.0  # アナリティック展開の最大長さ（メートル単位）
#       analytic_expansion_max_cost: 200  # アナリティック展開の最大コスト
#       analytic_expansion_max_cost_override: False  # ゴールに近い場合に最大コスト設定を上書きするかどうか
#       minimum_turning_radius: 0.0  # 最小旋回半径（メートル単位）
#       reverse_penalty: 2.1  # 逆行動のペナルティ
#       change_penalty: 0.0  # 方向転換のペナルティ
#       non_straight_penalty: 1.20  # 非直線行動のペナルティ
#       cost_penalty: 5.0  # 高コスト領域のペナルティ 2.0 -> 5.0
#       retrospective_penalty: 0.025  # 後方展開のペナルティ
#       rotation_penalty: 0.0  # その場回転のペナルティ
#       lookup_table_size: 20.0  # ルックアップテーブルのサイズ（メートル単位）
#       cache_obstacle_heuristic: True  # 障害物ヒューリスティックのキャッシュ
#       allow_reverse_expansion: True  # 逆方向の展開を許可するかどうか
#       smooth_path: True  # パスをスムーズにするかどうか
#       debug_visualizations: False  # デバッグ用の可視化を行うかどうか
#       smoother:
#         max_iterations: 1000  # スムージングの最大反復回数
#         w_smooth: 0.3  # スムージングの重み
#         w_data: 0.2  # データの重み
#         tolerance: 1.0e-10  # 許容誤差
#         do_refinement: True  # 精緻化を行うかどうか

planner_server:
  ros__parameters:
    expected_planner_frequency: 20.0 # default: 20.0 これはあげないほうがいい．上げると走行中に途中で固まったりする．
    use_sim_time: False
    planner_plugins: ["GridBased"]
    GridBased:
      plugin: "nav2_navfn_planner/NavfnPlanner"
      tolerance: 0.5
      use_astar: True
      allow_unknown: True

smoother_server:
  ros__parameters:
    use_sim_time: False
    smoother_plugins: ["simple_smoother"]
    simple_smoother:
      plugin: "nav2_smoother::SimpleSmoother"
      tolerance: 1.0e-10
      max_its: 1000
      do_refinement: True

behavior_server:
  ros__parameters:
    costmap_topic: local_costmap/costmap_raw
    footprint_topic: local_costmap/published_footprint
    cycle_frequency: 10.0 # (Hz) default: 10
    behavior_plugins:
      ["spin", "backup", "drive_on_heading", "assisted_teleop", "wait"]
    spin:
      plugin: "nav2_behaviors/Spin"
    backup:
      plugin: "nav2_behaviors/BackUp"
    drive_on_heading:
      plugin: "nav2_behaviors/DriveOnHeading"
    wait:
      plugin: "nav2_behaviors/Wait"
    assisted_teleop:
      plugin: "nav2_behaviors/AssistedTeleop"
    global_frame: odom
    robot_base_frame: base_footprint # default: base_link
    transform_tolerance: 1.0
    use_sim_time: False
    simulate_ahead_time: 2.0 # どんくらい先まで予測するか[s] default: 2.0
    max_rotational_vel: 0.40
    min_rotational_vel: 0.05
    rotational_acc_lim: 0.15

robot_state_publisher:
  ros__parameters:
    use_sim_time: False
    publish_frequency: 50.0

waypoint_follower:
  ros__parameters:
    use_sim_time: False # default: True Falseにするとガクつく．たぶん他全部もFalseにしないといけない
    loop_rate: 20
    stop_on_failure: True # 失敗時に停止するかどうか(default: False)
    waypoint_task_executor_plugin: "wait_at_waypoint"
    wait_at_waypoint:
      plugin: "nav2_waypoint_follower::WaitAtWaypoint"
      enabled: True
      waypoint_pause_duration: 200 # ウェイポイント到達後の待機時間[ms] default: 200

velocity_smoother:
  ros__parameters:
    use_sim_time: False
    smoothing_frequency: 20.0 # default: 20.0 controller_frequencyと同じ値にしたほうがいい
    scale_velocities: False # default: False Trueにして一回ガタついたので，Falseにしている
    feedback: "OPEN_LOOP" # デフォルトは"OPEN_LOOP" CLOSED_LOOPにすると動かない
    max_velocity: [0.40, 0.0, 0.40]
    min_velocity: [-0.40, 0.0, -0.40]
    max_accel: [0.60, 0.0, 0.60] # default: [0.30, 0.0, 0.35]
    max_decel: [-0.60, 0.0, -0.60] # default: [-0.30, 0.0, -0.35]
    odom_topic: "odom"
    odom_duration: 0.1
    deadband_velocity: [0.00, 0.0, 0.00]
    velocity_timeout: 1.0
